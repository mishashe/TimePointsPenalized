#test <- wilcox.test(x=Res[Res$status==0,"pred"], y = Res[Res$status==1,"pred"],alternative = c("two.sided", "less", "greater")[2])
print(lambda1)
print(lambda2)
print(AUC)
return(-min(AUC[it]))
}
optim(par=(c(0.01,0.0001)), FigureOfMerit, gr = NULL, method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B", "SANN","Brent")[4],
lower = c(1e-8,1e-8), upper = c(0.1,0.1), control = list(reltol=1e-15), hessian = FALSE)
beta=rep(0,ncol(x0)*length(tV))
loc <- matrix(0,nrow=1,ncol=length(beta))
library(Rcpp)
Rcpp::sourceCpp("/home/m.sheinman/Development/precision-CaseControl/src/models/Pathways/plots/TimePoints/pclogit/pclogit.cpp")
lambda1 <- 0.01
lambda2 <- 0.01
beta0 <- 0
fit = FitBeta(x=x0,y=y,beta=beta,beta0=beta0,lambda1=lambda1,lambda2=lambda2, loc=loc,nloc=nrow(loc),Thr=1e-3,maxit=10000,eps=1e-5)
sum(fit$beta!=0)
r <- c()
for (t in 1:length(tV))
{
rr <- fit$beta0 + x0 %*% fit$beta[(t-1)*ncol(x0)+1:ncol(x0)]
r <- c(r,1/(1+exp(-rr)))
}
round(r[y %in% c(0,1)] - y[y %in% c(0,1)])
library(glmnet)
fit <- glmnet(x0[y %in% c(1,0),],y[y %in% c(1,0)],family="binomial",lambda=lambda1,alpha=1)
beta <- as.vector(fit$beta)
beta0 <- fit$a0
# library(pclogit)
# registerDoMC(cores=40)
# lambda <- 0
# alpha <- 0.1
# s <- samples[1]
# Res <- foreach (s = unique(samples), .inorder=TRUE, .combine=rbind) %dopar%
# {
#   print(s)
#   Ind <- which(!(s == samples))
#   xI <- x[Ind,]
#   yI <- y[Ind]
#   res <- pclogitMy(x=xI,y=yI,stra=NULL,alpha=alpha,nlam=1,lambda=lambda,eps=NULL,maxit=100000,maxp=ncol(xI),thre=1e-6,group=gr,type=NULL,sgnc=NULL) # alpha= 1 -> lasso
#   IndNew <- which(s == samples)
#   ynew <-  (x[IndNew,] %*% res[[2]])[,1] + res[[1]]
#   ynew <- 1/(1+exp(-ynew))
#   data.frame(time=times[IndNew],sample=samples[IndNew],pred=ynew,status=y[IndNew],Set="KCL1",nGenes=sum(res[[2]]!=0))
# }
#
# mart <- useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
# getBM(attributes=c("ensembl_gene_id", "external_gene_name", "transcript_length","cds_start"), mart=mart)
SamplesInfo <- read_tsv("/DATA/share/dcis_recurrence/2021-02-01-sample-annotation/sample_annotation+pam50.tsv", col_names = TRUE)
FUtable <- read_tsv("/home/m.sheinman/Development/precision-CaseControl/data/raw/clin.csv", col_names = TRUE)
xKCL1 <- as.matrix(read.table("/DATA/share/dcis_recurrence/2021-04-14-rnaseq-kcl/gene-expression-kcl.tsv", header = TRUE, row.names=1, sep="\t"))
Excluded <- data.frame(read_tsv("/DATA/share/dcis_recurrence/2021-04-14-rnaseq-kcl/excluded_samples_kcl.tsv"))$precision_sample
xKCL1 <- xKCL1[,!(colnames(xKCL1) %in% Excluded)]; Set="KCL1"
samples <- colnames(xKCL1)
patients <- sapply(samples,function(s){SamplesInfo$site_accession[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
FU <- sapply(patients,function(p){FUtable$fu_months[which(FUtable$site_accession==p)][1]})
Age <- sapply(patients,function(p){FUtable$age_diagnose[which(FUtable$site_accession==p)][1]})
tissue_pathology <- sapply(samples,function(s){SamplesInfo$tissue_pathology[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
event_type <- sapply(samples,function(s){SamplesInfo$event_type[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
case_laterality <-sapply(samples,function(s){SamplesInfo$case_laterality[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
radiotherapy <- sapply(samples,function(s){SamplesInfo$radiotherapy[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
case_control <- sapply(samples,function(s){SamplesInfo$case_control[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
case_pathology <- sapply(samples,function(s){SamplesInfo$case_pathology[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
Ind <- which(radiotherapy %in% c(0) & !is.na(FU)  &event_type=="PRI" & case_control %in% c("Case","Control") & (case_control %in% c("Control") | case_pathology=="Invasive Carcinoma"))
xKCL1 <- xKCL1[,Ind]
samples <- colnames(xKCL1)
patients <- sapply(samples,function(s){SamplesInfo$site_accession[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
FU <- sapply(patients,function(p){FUtable$fu_months[which(FUtable$site_accession==p)][1]})
Age <- sapply(patients,function(p){FUtable$age_diagnose[which(FUtable$site_accession==p)][1]})
tissue_pathology <- sapply(samples,function(s){SamplesInfo$tissue_pathology[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
event_type <- sapply(samples,function(s){SamplesInfo$event_type[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
case_laterality <-sapply(samples,function(s){SamplesInfo$case_laterality[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
radiotherapy <- sapply(samples,function(s){SamplesInfo$radiotherapy[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
case_control <- sapply(samples,function(s){SamplesInfo$case_control[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
case_pathology <- sapply(samples,function(s){SamplesInfo$case_pathology[which(SamplesInfo$sample_id==s & SamplesInfo$experimental_technique=="RNA Sequencing" & SamplesInfo$material_type=="RNA")][1]})
GenesEnsembl <- sapply(rownames(xKCL1),function(g){strsplit(g,split="[.]")[[1]][1]})
GenesNames <- ensembldb::select(EnsDb.Hsapiens.v86, key=GenesEnsembl,columns=c("SYMBOL"),keytype="GENEID")
rownames(GenesNames) <- GenesNames[,1]
GenesNames <- GenesNames[GenesEnsembl,2]
Ind <- which(!is.na(GenesNames))
xKCL1 <- xKCL1[Ind,]
rownames(xKCL1) <- GenesNames[Ind]
xKCL1 <- DGEList(xKCL1)
xKCL1 <- calcNormFactors(xKCL1)
xKCL1 <- calcNormFactors(xKCL1,method="TMM")
cutoff <- 300
drop <- which(apply(cpm(xKCL1), 1, mean) < cutoff)
xKCL1 <- xKCL1[-drop,]
dim(xKCL1)
Out <- as.matrix(data.frame(time=FU,status=(case_control=="Case")+0))
mm <- model.matrix(~0 + case_control)
pdf(paste0("/home/m.sheinman/Development/precision-CaseControl/src/models/Pathways/plots/TimePoints/pclogit/KCL1.pdf"))
y <- voom(xKCL1, mm, plot = TRUE)
dev.off()
x0 <- t(cpm(xKCL1,log=TRUE))
tV <- seq(4,5,1)*12
y <- c()
samples <- c()
times <- c()
Set <- c()
for (it in 1:length(tV))
{
t <- tV[it]
case_controlT <- ifelse(FU>t,"Control",ifelse(case_control=="Case","Case","Exclude"))
# case_controlT <- case_control
y <- c(y,case_controlT)
samples <- c(samples,rownames(x0))
times <- c(times,rep(t,nrow(x0)))
}
x <- kronecker(diag(length(tV)),x0)
colnames(x) <- rep(colnames(x0),length(tV))
rownames(x) <- rep(rownames(x0),length(tV))
library(Matrix)
group <- sparseMatrix(i=1:(ncol(x)-ncol(x0)),j=(ncol(x0)+1):ncol(x),x=rep(1,ncol(x)-ncol(x0)),dims=c(ncol(x),ncol(x)))
group <- group+t(group)
Ind <- which(y %in% c("Case","Control"))
x <- x[Ind,]
y <- y[Ind]
samples <- samples[Ind]
times <- times[Ind]
y <- 0+(y=="Case")
gr <- group.matrix(group)
# library(pclogit)
# registerDoMC(cores=40)
# lambda <- 0
# alpha <- 0.1
# s <- samples[1]
# Res <- foreach (s = unique(samples), .inorder=TRUE, .combine=rbind) %dopar%
# {
#   print(s)
#   Ind <- which(!(s == samples))
#   xI <- x[Ind,]
#   yI <- y[Ind]
#   res <- pclogitMy(x=xI,y=yI,stra=NULL,alpha=alpha,nlam=1,lambda=lambda,eps=NULL,maxit=100000,maxp=ncol(xI),thre=1e-6,group=gr,type=NULL,sgnc=NULL) # alpha= 1 -> lasso
#   IndNew <- which(s == samples)
#   ynew <-  (x[IndNew,] %*% res[[2]])[,1] + res[[1]]
#   ynew <- 1/(1+exp(-ynew))
#   data.frame(time=times[IndNew],sample=samples[IndNew],pred=ynew,status=y[IndNew],Set="KCL1",nGenes=sum(res[[2]]!=0))
# }
#
N <- 1000
x <- matrix(rnorm(300*N),nrow=300,ncol=N)
beta <- c(rep(1,10),rep(0,N-10))
betaS <- beta*1
betaSS <- betaS + 1
y <- round(1/(1+exp(-x %*% beta)))[,1]
loc <- matrix(0,ncol=N,nrow=1)
library(Rcpp)
Rcpp::sourceCpp("/home/m.sheinman/Development/precision-CaseControl/src/models/Pathways/plots/TimePoints/pclogit/pclogit.cpp")
lambda1 <- 0.005
lambda2 <- 0
beta0 <- 0
beta <- rep(0,ncol(x))
beta <- c(beta,beta)
y <- c(y,1-y)
loc <- matrix(0,ncol=length(beta),nrow=1)
fit = FitBeta(x=x+5,y=y,beta=beta,beta0=beta0,lambda1=lambda1,lambda2=lambda2, loc=loc,nloc=nrow(loc),Thr=1e-7,maxit=1000,eps=1e-5)
which(fit$beta!=0)
fit$beta0
library(glmnet)
beta <- as.vector(glmnet(x,y,family="binomial",lambda=lambda,alpha=1)$beta)
fit[1:20]
sum(fit.glmnet$beta!=0)
# loc <- gr$loc
# beta <- rep(0,ncol(x))
x <- matrix(rnorm(10*17),nrow=10,ncol=17)
beta <- rnorm(17)
y <- round(1/(1+exp(-x %*% beta)))[,1]
loc <- matrix(0,ncol=17,nrow=1)
system("rm /home/m.sheinman/Development/precision-CaseControl/src/models/Pathways/plots/TimePoints/pclogit/pclogit.so")
system("R CMD SHLIB /home/m.sheinman/Development/precision-CaseControl/src/models/Pathways/plots/TimePoints/pclogit/pclogit.cpp")
dyn.load("/home/m.sheinman/Development/precision-CaseControl/src/models/Pathways/plots/TimePoints/pclogit/pclogit.so")
lambda <- 0
alpha <- 0.1
fit = .C("pclogit",x=t(x),y=y,n=nrow(x),m=ncol(x),beta=beta,lambda=lambda,alpha=alpha, loc=t(loc)) nloc=nrow(loc))
expand.grid(lma1 = seq(from=1e-3, to=30, length.out=7), lam2 = seq(from=1e-3, to=30, length.out=7) )
for (g in 1:length(glmnetGenes)){chra <- c(chra,rep(g,length(tV)))}
exp(-0.66)
10^0.1
par <- log10(c(30,5))
0.0005*200
0.02 * 1000 *10
0.02 * 1000 *10 *24
0.0065 * 1000 *10 *24
library(Matrix)
G <- sparseMatrix(i=1:m,j=1:m,x=rep(1,m),dims=c(m,m))
G <- G + sparseMatrix(i=1:(m-1),j = 1+ (1:(m-1)),x=rep(-1,m-1),dims=c(m,m))
sample(c(2341,234,432,423),1)
y <- c(1,1,0,1,1,0,0,1,1,1,1,1,0)
MakeUpSampling <- function(y)
{
Ind <- 1:length(y)
while (sum(y[Ind]==0)<sum(y[Ind]==1))
{
Ind <- c(Ind,sample(which(y==0)))
}
while (sum(y[Ind]==0)>sum(y[Ind]==1))
{
Ind <- c(Ind,sample(which(y==1)))
}
}
MakeUpSampling
MakeUpSampling(y)
MakeUpSampling <- function(y)
{
Ind <- 1:length(y)
while (sum(y[Ind]==0)<sum(y[Ind]==1))
{
Ind <- c(Ind,sample(which(y==0)))
}
while (sum(y[Ind]==0)>sum(y[Ind]==1))
{
Ind <- c(Ind,sample(which(y==1)))
}
return(Ind)
}
MakeUpSampling(y)
Ind <- MakeUpSampling(y)
y[Ind]
table(y[Ind])
table(y)
table(y[Ind])
Ind <- 1:length(y)
Ind
while (sum(y[Ind]==0)<sum(y[Ind]==1))
{
Ind <- c(Ind,sample(which(y==0)))
}
y[Ind]
y
table(y[Ind])
MakeUpSampling <- function(y)
{
Ind <- 1:length(y)
while (sum(y[Ind]==0)<sum(y[Ind]==1))
{
Ind <- c(Ind,sample(which(y==0),1))
}
while (sum(y[Ind]==0)>sum(y[Ind]==1))
{
Ind <- c(Ind,sample(which(y==1),1))
}
return(Ind)
}
Ind <- 1:length(y)
while (sum(y[Ind]==0)<sum(y[Ind]==1))
{
Ind <- c(Ind,sample(which(y==0),1))
}
while (sum(y[Ind]==0)>sum(y[Ind]==1))
{
Ind <- c(Ind,sample(which(y==1),1))
}
y[Ind]
table(y[Ind])
mean(c(0.773,0.828,0.741,0.715))
install.packages("sparseGFL")
install_github("ddegras/sparseGFL")
githubinstall("ddegras/sparseGFL")
library(devtools)
install_github("ddegras/sparseGFL")
Genes <- intersect(rownames(xKCL1),rownames(xNKI1),rownames(x2))
m <- 5
G <- sparseMatrix(i=1:m,j=1:m,x=rep(1,m),dims=c(m,m))
G <- G + sparseMatrix(i=1:(m-1),j = 1+ (1:(m-1)),x=rep(-1,m-1),dims=c(m,m))
G[seq(4,nrow(G),4),] <- G[seq(4,nrow(G),4),]*0
G
m <- 40
G <- sparseMatrix(i=1:m,j=1:m,x=rep(1,m),dims=c(m,m))
G <- G + sparseMatrix(i=1:(m-1),j = 1+ (1:(m-1)),x=rep(-1,m-1),dims=c(m,m))
G[seq(4,nrow(G),4),] <- G[seq(4,nrow(G),4),]*0
G
inv(G)
(G)
library(matlib)
install.packages("matlib")
library(matlib)
inv(G)
dim(G)
inv(as.matrix(G))
G
G <- as.matrix(G)
G
pinv(G)
solve(G)
G <- sparseMatrix(i=1:m,j=1:m,x=rep(1,m),dims=c(m,m))
G <- G + sparseMatrix(i=1:(m-1),j = 1+ (1:(m-1)),x=rep(-1,m-1),dims=c(m,m))
G
solve(G)
G[seq(4,nrow(G),4),] <- G[seq(4,nrow(G),4),]*0
solve(G)
G[seq(4,nrow(G),4),] <- G[seq(4,nrow(G),4),]*1e-5
G <- sparseMatrix(i=1:m,j=1:m,x=rep(1,m),dims=c(m,m))
G <- G + sparseMatrix(i=1:(m-1),j = 1+ (1:(m-1)),x=rep(-1,m-1),dims=c(m,m))
G[seq(4,nrow(G),4),] <- G[seq(4,nrow(G),4),]*1e-5
solve(G)
m <- 10
m <- 12
G <- sparseMatrix(i=1:m,j=1:m,x=rep(1,m),dims=c(m,m))
G <- G + sparseMatrix(i=1:(m-1),j = 1+ (1:(m-1)),x=rep(-1,m-1),dims=c(m,m))
G[seq(4,nrow(G),4),] <- G[seq(4,nrow(G),4),]*1e-5
solve(G)
t <- 1:100
plot(t,(10-t)^2+abs(t))
t <- 1:20
plot(t,(10-t)^2+abs(t))
plot(t,(10-t)^2+10*abs(t))
plot(t,(10-t)^2+100*abs(t))
t <- -1:20
plot(t,(10-t)^2+100*abs(t))
t1 <- -10:10
t2 <- -10:10
lam <- 0.1
library(lattice)
grid <- expand.grid(x=t1, y=t2)
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",
scales=list(arrows=FALSE))
contourplot(z ~ x*y, data=grid, cuts=10, aspect = "iso")
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[which.min(grid$z),]
t1 <- seq(-10,10,0.1)
t2 <- seq(-10,10,0.1)
lam <- 0.1
library(lattice)
grid <- expand.grid(x=t1, y=t2)
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[which.min(grid$z),]
grid[grid$z==min(grid$z),]
t1 <- seq(-10,10,0.1)
t2 <- seq(-10,10,0.1)
lam <- 0.2
library(lattice)
grid <- expand.grid(x=t1, y=t2)
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(-3,3,0.1)
t2 <- seq(-3,3,0.1)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.2
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
contourplot(z ~ x*y, data=grid, cuts=10, aspect = "iso")
t1 <- seq(-2,2,0.1)
t2 <- seq(-2,2,0.1)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.2
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(-2,2,0.1)
t2 <- seq(-2,2,0.1)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.3
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(-2,2,0.1)
t2 <- seq(-2,2,0.1)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.4
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(-2,2,0.1)
t2 <- seq(-2,2,0.1)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.5
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(-2,2,0.1)
t2 <- seq(-2,2,0.1)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.8
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(-2,2,0.1)
t2 <- seq(-2,2,0.1)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 2.8
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(-2,2,0.1)
t2 <- seq(-2,2,0.1)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.001
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(-2,2,0.1)
t2 <- seq(-2,2,0.1)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.1
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(-2,2,0.01)
t2 <- seq(-2,2,0.01)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.1
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
t1 <- seq(0,1,0.01)
t2 <- seq(0,0.1,0.01)
library(lattice)
grid <- expand.grid(x=t1, y=t2)
lam <- 0.1
grid$z = with(grid, (x+y/2-1)^2+lam*abs(x)+lam*abs(y))
wireframe(z ~ x*y, data=grid, shade=TRUE, main="X=Y",          scales=list(arrows=FALSE))
grid[grid$z==min(grid$z),]
rnorm(4, mean = 0, sd = 1)
rnorm(4, mean = 0, sd = 1)
rnorm(4, mean = 0, sd = 1)
rnorm(4, mean = 0, sd = 1)
rnorm(4, mean = 0, sd = 1)
glmnet <- (x,y)
sample(1:4)
sample(1:4)
sample(1:4)
log10(0.016)
70*7/5
70*7/5
setwd("~/Documents/Development/TimePointsPenalized")
library(expm)
library(glmnet)
library(Rcpp)
library(pROC)
library(stringr)
library(tidyverse)
library(ggpubr)
library(ComplexHeatmap)
require(doParallel)
library(RcppArmadillo)
library(Rcpp)
system("export OPENBLAS_NUM_THREADS=1")
system("export GOTO_NUM_THREADS=1")
system("export OMP_NUM_THREADS=1")
compileAttributes()
# Rcpp::sourceCpp("/home/misha/Documents/Development/TimePointsPenalized/src/FittingFunctions.cpp")
sourceCpp("src/FittingFunctions.cpp")
library(expm)
library(glmnet)
library(Rcpp)
library(pROC)
library(stringr)
library(tidyverse)
library(ggpubr)
library(ComplexHeatmap)
require(doParallel)
library(RcppArmadillo)
library(Rcpp)
system("export OPENBLAS_NUM_THREADS=1")
system("export GOTO_NUM_THREADS=1")
system("export OMP_NUM_THREADS=1")
compileAttributes()
# Rcpp::sourceCpp("/home/misha/Documents/Development/TimePointsPenalized/src/FittingFunctions.cpp")
sourceCpp("src/FittingFunctions.cpp")
library(expm)
library(glmnet)
library(Rcpp)
library(pROC)
library(stringr)
library(tidyverse)
library(ggpubr)
library(ComplexHeatmap)
require(doParallel)
library(RcppArmadillo)
library(Rcpp)
system("export OPENBLAS_NUM_THREADS=1")
system("export GOTO_NUM_THREADS=1")
system("export OMP_NUM_THREADS=1")
compileAttributes()
# Rcpp::sourceCpp("/home/misha/Documents/Development/TimePointsPenalized/src/FittingFunctions.cpp")
sourceCpp("src/FittingFunctions.cpp")
install_github("mishashe/TimePointsPenalized")
library(expm)
library(glmnet)
library(Rcpp)
library(pROC)
library(stringr)
library(tidyverse)
library(ggpubr)
library(ComplexHeatmap)
require(doParallel)
library(RcppArmadillo)
library(Rcpp)
library(devtools)
install_github("mishashe/TimePointsPenalized")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
library(usethis)
install.packages("usethis")
library(usethis)
