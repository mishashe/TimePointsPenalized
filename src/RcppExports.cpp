// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sgn
arma::vec sgn(arma::vec val);
RcppExport SEXP _TimePointsPenalized_sgn(SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(sgn(val));
    return rcpp_result_gen;
END_RCPP
}
// glmnetSimple
arma::vec glmnetSimple(arma::mat X, arma::vec Y, double lam1);
RcppExport SEXP _TimePointsPenalized_glmnetSimple(SEXP XSEXP, SEXP YSEXP, SEXP lam1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    rcpp_result_gen = Rcpp::wrap(glmnetSimple(X, Y, lam1));
    return rcpp_result_gen;
END_RCPP
}
// GetHessian
void GetHessian(arma::mat x, arma::vec beta, arma::vec p, arma::vec y, double lam2, arma::vec w, arma::vec& b, arma::mat& a);
RcppExport SEXP _TimePointsPenalized_GetHessian(SEXP xSEXP, SEXP betaSEXP, SEXP pSEXP, SEXP ySEXP, SEXP lam2SEXP, SEXP wSEXP, SEXP bSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type a(aSEXP);
    GetHessian(x, beta, p, y, lam2, w, b, a);
    return R_NilValue;
END_RCPP
}
// CalculateDeltaIntercept
double CalculateDeltaIntercept(arma::vec y, arma::vec p, arma::vec w);
RcppExport SEXP _TimePointsPenalized_CalculateDeltaIntercept(SEXP ySEXP, SEXP pSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(CalculateDeltaIntercept(y, p, w));
    return rcpp_result_gen;
END_RCPP
}
// GroupRound
arma::vec GroupRound(arma::mat x0, arma::vec y, arma::vec tV, double lam1, double lam2, arma::vec beta, double& Intercept, arma::vec w, arma::vec IndFor0, arma::vec IndTFor0, arma::vec& M, double& LLmin);
RcppExport SEXP _TimePointsPenalized_GroupRound(SEXP x0SEXP, SEXP ySEXP, SEXP tVSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP betaSEXP, SEXP InterceptSEXP, SEXP wSEXP, SEXP IndFor0SEXP, SEXP IndTFor0SEXP, SEXP MSEXP, SEXP LLminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tV(tVSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double& >::type Intercept(InterceptSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type IndFor0(IndFor0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type IndTFor0(IndTFor0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double& >::type LLmin(LLminSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupRound(x0, y, tV, lam1, lam2, beta, Intercept, w, IndFor0, IndTFor0, M, LLmin));
    return rcpp_result_gen;
END_RCPP
}
// SingleGeneRound
arma::vec SingleGeneRound(arma::mat x0, arma::vec y, arma::vec tV, double lam1, double lam2, arma::vec beta, double& Intercept, arma::vec w, arma::vec IndFor0, arma::vec IndTFor0, arma::vec& M, double& LLmin);
RcppExport SEXP _TimePointsPenalized_SingleGeneRound(SEXP x0SEXP, SEXP ySEXP, SEXP tVSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP betaSEXP, SEXP InterceptSEXP, SEXP wSEXP, SEXP IndFor0SEXP, SEXP IndTFor0SEXP, SEXP MSEXP, SEXP LLminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tV(tVSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double& >::type Intercept(InterceptSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type IndFor0(IndFor0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type IndTFor0(IndTFor0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double& >::type LLmin(LLminSEXP);
    rcpp_result_gen = Rcpp::wrap(SingleGeneRound(x0, y, tV, lam1, lam2, beta, Intercept, w, IndFor0, IndTFor0, M, LLmin));
    return rcpp_result_gen;
END_RCPP
}
// FitRound
arma::vec FitRound(arma::mat x0, arma::vec y, arma::vec tV, double lam1, double lam2, arma::vec beta, double Intercept, arma::vec w, arma::vec IndFor0, arma::vec IndTFor0);
RcppExport SEXP _TimePointsPenalized_FitRound(SEXP x0SEXP, SEXP ySEXP, SEXP tVSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP betaSEXP, SEXP InterceptSEXP, SEXP wSEXP, SEXP IndFor0SEXP, SEXP IndTFor0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tV(tVSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type Intercept(InterceptSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type IndFor0(IndFor0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type IndTFor0(IndTFor0SEXP);
    rcpp_result_gen = Rcpp::wrap(FitRound(x0, y, tV, lam1, lam2, beta, Intercept, w, IndFor0, IndTFor0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TimePointsPenalized_sgn", (DL_FUNC) &_TimePointsPenalized_sgn, 1},
    {"_TimePointsPenalized_glmnetSimple", (DL_FUNC) &_TimePointsPenalized_glmnetSimple, 3},
    {"_TimePointsPenalized_GetHessian", (DL_FUNC) &_TimePointsPenalized_GetHessian, 8},
    {"_TimePointsPenalized_CalculateDeltaIntercept", (DL_FUNC) &_TimePointsPenalized_CalculateDeltaIntercept, 3},
    {"_TimePointsPenalized_GroupRound", (DL_FUNC) &_TimePointsPenalized_GroupRound, 12},
    {"_TimePointsPenalized_SingleGeneRound", (DL_FUNC) &_TimePointsPenalized_SingleGeneRound, 12},
    {"_TimePointsPenalized_FitRound", (DL_FUNC) &_TimePointsPenalized_FitRound, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_TimePointsPenalized(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
